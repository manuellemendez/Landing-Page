import { LottiePlayer, AnimationConfig } from "lottie-web";
import { IAnimation } from "../interfaces.js";
declare type SUPPORTED_ATTRIBUTES = "palette" | "params" | "src" | "icon" | "animation" | "speed" | "target";
export declare class Element extends HTMLElement {
    protected isReady: boolean;
    protected root: ShadowRoot;
    protected lottie?: LottiePlayer;
    protected myConnectedAnimation?: IAnimation;
    protected icon?: string;
    protected src?: string;
    protected palette?: string;
    protected animation?: string;
    protected speed?: string;
    protected params?: string;
    protected target?: string;
    /**
     * Register Lottie library.
     * @param loader Provide "loadAnimation" here from Lottie.
     */
    static registerLoader(loader: (params: AnimationConfig) => LottiePlayer): void;
    /**
     * Register supported icon.
     * @param name
     * @param data
     */
    static registerIcon(name: string, data: any): void;
    /**
     * Register supported animation.
     * @param name
     * @param animationClass
     */
    static registerAnimation(name: string, animationClass: any): void;
    constructor();
    /**
     * Element connected.
     */
    protected connectedCallback(): void;
    /**
     * Element disconnected.
     */
    protected disconnectedCallback(): void;
    protected attributeChangedCallback(name: SUPPORTED_ATTRIBUTES, oldValue: any, newValue: any): void;
    protected init(): void;
    protected registerLottie(): void;
    protected unregisterLottie(): void;
    protected notify(name: string, from: "icon" | "animation"): void;
    protected animationChanged(): void;
    protected paletteChanged(): void;
    protected paramsChanged(): void;
    protected speedChanged(): void;
    protected iconChanged(): void;
    protected srcChanged(): Promise<void>;
    /**
     * Acces icon data for this element.
     */
    get iconData(): any;
    /**
     * Access current animation instance.
     */
    get connectedAnimation(): IAnimation | undefined;
    protected get container(): HTMLElement | undefined;
    protected get animationSpeed(): number;
    protected static get observedAttributes(): string[];
}
export {};
