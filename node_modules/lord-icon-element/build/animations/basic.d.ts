import { LottiePlayer } from 'lottie-web';
import { IAnimation } from '../interfaces';
/**
 * Basic implementation for supported animations.
 */
export declare class Basic implements IAnimation {
    protected readonly element: HTMLElement;
    protected readonly target: HTMLElement;
    protected readonly lottie: LottiePlayer;
    private myInAnimation;
    private myIsReady;
    private myLeaveBound;
    private myEnterBound;
    private myConnected;
    constructor(element: HTMLElement, target: HTMLElement, lottie: LottiePlayer);
    /**
     * The animation has been connected.
     */
    connectedCallback(): void;
    /**
     * The animation has been disconnected.
     */
    disconnectedCallback(): void;
    /**
     * Callback for animation ready.
     */
    ready(): void;
    /**
     * Callback for animation complete.
     */
    complete(): void;
    /**
     * Callback for animation enter.
     */
    enter(): void;
    /**
     * Callback for animation leave.
     */
    leave(): void;
    /**
     * Play animation.
     */
    play(): void;
    /**
     * Play animation from begining.
     */
    playFromBegining(): void;
    /**
     * Stop animation.
     */
    stop(): void;
    /**
     * Go to animation frame.
     * @param value
     */
    goToFrame(value: number): void;
    /**
     * Go to first animation frame.
     */
    goToFirstFrame(): void;
    /**
     * Go to last animation frame.
     */
    goToLastFrame(): void;
    /**
     * Set direction of animation.
     * Forward (1) and backward (-1).
     */
    setDirection(direction: number): void;
    /**
     * Enable or disable loop for this animation.
     * @param value
     */
    setLoop(value: boolean): void;
    /**
     * Controls speed of animation (1 is normal speed).
     * @param value
     */
    setSpeed(value: number): void;
    /**
     * Checks whether the animation is in progress.
     */
    get inAnimation(): boolean;
    /**
     * Check whether the animation is ready.
     */
    get isReady(): boolean;
    /**
     * Bounded version of enter callback.
     */
    get enterBound(): any;
    /**
     * Bounded version of leave callback.
     */
    get leaveBound(): any;
    /**
     * Animation is connected.
     */
    get connected(): boolean;
}
